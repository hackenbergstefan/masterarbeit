# This file was *autogenerated* from the file examples/scheerhorn1.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_13 = Integer(13); _sage_const_2 = Integer(2); _sage_const_9 = Integer(9); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)
from sage.all import *
import sys

load("./algorithmen.spyx")

###
q = _sage_const_13 
#n = 7   # nu(n) | q+1
n = _sage_const_9   # nu(n) | q-1
###

###
#q = 2
#n = 27 # nu(n) | q+1
###


F = GF(q, 'a');
Fx = PolynomialRing(F,'x');
s = ord(squarefree(n),q)


print "----------------------------------------"
print "----- Preliminaries"
print "F = GF("+str(q)+")\tn = "+str(n)
print "we examine the extension: "
print "E = GF(q^n) = GF(q^"+str(n)+") = GF("+str(q**n)+")"
print "G = GF(q^s) = GF("+str(q)+"^"+str(s)+") = GF("+str(q**_sage_const_2 )+")",\
        "were s = ord_nu(n)(q) = ",s
print "H = GF(q^(sn)) = GF(q^("+str(s)+"*"+str(n)+")) = "+\
        "GF("+str(q**(_sage_const_2 *n))+") -> total splitting field"

print "----------------------------------------"
print "----- Implementation details"

print "find irreducible Dickson-Polynom"
(a,b,f) = gen_irred_dickson(n,Fx)
print "\t","D_n(X,a)-b = D_"+str(n)+"(X,"+str(a)+") - "+str(b)+" is irreducible="\
        +str(f.is_irreducible())
print "\t", "a = ", a, "b = ",b

print "find extension of degree s="+str(s)+" named G"
g = Fx.gen()**_sage_const_2  - b*Fx.gen() + a**n;

if s > _sage_const_1 :
    print "\t","generated by root beta of ", g, "irred = ",g.is_irreducible()
    G = F.extension(g,'beta');
    beta = G.gen();
    print "G = ",G

    Gx = PolynomialRing(G, 'x');
else:
    print "\t", "consider g = X^2 - bX + a^n = ",g, "=",g.factor()
    G = F
    Gx = Fx
    beta = g.roots()[_sage_const_0 ][_sage_const_0 ];
    print "G = ", G
    print "\t", "with beta = ", beta


print "find extension of degree s*n="+str(s)+"*"+str(n)+"="+str(s*n)+" named H"
h = Gx('x')**n - beta;

print "\t", "generated by root th of ", h, "irred=", h.is_irreducible();

H = G.extension(h, 'th');
print "H = ",H

th = H.gen();
Hx = PolynomialRing(H, 'x');

print "----------------------------------------"
print "now th + a*th^(-1) should be root of D_n(X,a)"
print "\t", "D_"+str(n)+"("+str(th+a*th**(-_sage_const_1 ))+", "+str(a)+") = ",\
        f(th+a*th**(-_sage_const_1 ))


# Splitting of cyclotomic Polynomials
print "----------------------------------------"
print "----- Splitting of Cyclotomic Polynomials"
for i in divisors(n):
    phi = Fx.cyclotomic_polynomial(i).factor();
    print "Phi_"+i.str()+" = ", phi, "over F"
    sys.stdout.write("\t")
    for (d,e) in phi:
        sys.stdout.write("[ "+str(Gx(d).factor())+" ] ")
    sys.stdout.write(" over G\n")

print "----------------------------------------"
print "Ord_q^2(th) = ",tau_order(th,G)
print "it should be: Ord_q(th) = f(x^s) for f=MiPo_F( Ord_q^s(th) )"
print "\t we have:\tf = ", mipo(q,s,tau_order(th,G))
print "\t and \t Ord_q(th) = ", tau_order(th,F)


print "----------------------------------------"
print "----- test tau-orders: "
print "Ord_q(th^i):"
for i in range(_sage_const_0 ,n+_sage_const_1 ):
    print "i="+str(i)+" =>", tau_order(th**i, F),\
        "\t\ti=-"+str(i)+" =>", tau_order(th**(-i), F)

print "Ord_q^s(th^i):"
for i in range(_sage_const_0 ,n+_sage_const_1 ):
    print "i="+str(i)+" =>", tau_order(th**i, G),\
        "\t\ti=-"+str(i)+" =>", tau_order(th**(-i), G)

print "Ord_q(th^i+a^i*th^(-i)) = Ord_q(D_i(th+a*th^-1) = "
for i in range(_sage_const_0 ,n+_sage_const_1 ):
    print "i="+str(i)+" =>", tau_order(th**i+a**i*th**(-i), F)

print "Ord_q^s(th^i+a^i*th^(-i)) = Ord_q^s(D_i(th+a*th^-1) = "
for i in range(_sage_const_0 ,n+_sage_const_1 ):
    print "i="+str(i)+" =>", tau_order(th**i+a**i*th**(-i), G)
